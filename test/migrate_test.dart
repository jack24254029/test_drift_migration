import 'package:drift/drift.dart';
import 'package:drift_dev/api/migrations.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:test_drift_migration/database.dart';

import 'generated_migrations/schema.dart';
import 'generated_migrations/schema_v1.dart' as v1;
import 'generated_migrations/schema_v2.dart' as v2;

void main() {
  late SchemaVerifier verifier;

  setUpAll(() {
    // GeneratedHelper() was generated by drift, the verifier is an api
    // provided by drift_generator.
    verifier = SchemaVerifier(GeneratedHelper());
  });
  test('upgrade from v1 to v2', () async {
    final schema = await verifier.schemaAt(1);
    // Add some data to the users table, which only has an id column at v1
    final oldDb = v1.DatabaseAtV1.connect(schema.newConnection());
    await oldDb.into(oldDb.partner).insert(const v1.PartnerCompanion(
          uid: Value(1),
        ));
    await oldDb.into(oldDb.glucoseMapping).insert(const v1.GlucoseMappingCompanion(
          uid: Value(1),
        ));
    await oldDb.close();

    // Run the migration and verify that it adds the name column.
    final db = MyDatabase.connect(schema.newConnection());
    await verifier.migrateAndValidate(db, 2);
    await db.close();

    // Make sure the user is still here
    final v2.DatabaseAtV2 migratedDb = v2.DatabaseAtV2.connect(schema.newConnection());
    var partnerData = await migratedDb.select(migratedDb.partner).get();
    print('Partner Data Length Before Delete: ${partnerData.length}');
    await migratedDb.delete(migratedDb.partner).go();
    partnerData = await migratedDb.select(migratedDb.partner).get();
    print('Partner Data Length After Delete: ${partnerData.length}');
    final glucoseMappingData = await migratedDb.select(migratedDb.glucoseMapping).get();
    print('GlucoseMapping Data Length After Delete Partner: ${glucoseMappingData.length}');
    expect(glucoseMappingData.length, 0);
    await migratedDb.close();
  });
}
